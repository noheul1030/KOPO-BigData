package test1;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.opencsv.CSVWriter;

public class DongSuh_xlsx {
    public static void main(String[] args) {

        String writeFileName = "C:\\Users\\kopo12\\Desktop\\data\\DongSuh-xlsx.xlsx"; // 

        double[][] monthlyData = new double[12][4]; // [월][0: 개수, 1: 합계, 2: 최솟값, 3: 최댓값]

        try {
            String file = "C:\\Users\\kopo12\\Desktop\\data\\DongSuh2.xlsx"; // 데이터 읽는 경로
            FileInputStream fis = new FileInputStream(file);
            XSSFWorkbook workbook = new XSSFWorkbook(fis);
            XSSFSheet sheet = workbook.getSheet("DongSuh2");

            int rowsCount = sheet.getPhysicalNumberOfRows();
            int colsCount = sheet.getRow(0).getPhysicalNumberOfCells();

            for (int row = 1; row < rowsCount; row++) {
                XSSFRow rows = sheet.getRow(row);
                if (rows != null) {
                    XSSFCell dateCell = rows.getCell(0); // Date 컬럼
                    XSSFCell valueCell = rows.getCell(1); // Open 컬럼 기준 min, max, avg 값 달 멸로 변환

                    if (dateCell != null && valueCell != null) {
                        Date date = dateCell.getDateCellValue();
                        double value = 0.0;

                        switch (valueCell.getCellType()) {
                            case NUMERIC:
                                if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(valueCell)) {
                                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd"); // date 형식 string으로 변환
                                    value = Double.parseDouble(dateFormat.format(date)); // 데이터 값 double 형으로
                                } else {
                                    value = valueCell.getNumericCellValue();
                                }
                                break;

                            case STRING:
                                String valueStr = valueCell.getStringCellValue();
                                try {
                                    value = Double.parseDouble(valueStr);
                                } catch (NumberFormatException e) {
                                    // 오류 발생 시 처리할 내용을 작성(예: 값을 0으로 처리)
                                    value = 0.0;
                                }
                                break;

                            case BLANK:
                                value = 0.0;
                                break;

                            case ERROR:
                                value = 0.0;
                                break;

                            default:
                                break;
                        }

                        int month = date.getMonth(); // 월별 인덱스로 변환

                        // 최솟값 계산
                        if (value < monthlyData[month][2] || monthlyData[month][0] == 0) {
                            monthlyData[month][2] = value;
                        }

                        // 최댓값 계산
                        if (value > monthlyData[month][3]) {
                            monthlyData[month][3] = value;
                        }

                        // 개수, 총합계
                        monthlyData[month][0]++;
                        monthlyData[month][1] += value;
                    }
                }
            }
            fis.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e2) {
            e2.printStackTrace();
        }

        String[] header = { "Month", "Min", "Max", "Avg" };
        for (int i = 0; i < header.length; i++) { // header 출력
            System.out.print(header[i] + "\t");
        }
        System.out.println();

        // 월별 최솟값, 최댓값, 평균값 출력
        for (int month = 0; month < 12; month++) {
            int count = (int) monthlyData[month][0];
            double min = monthlyData[month][2];
            double max = monthlyData[month][3];
            double avg = monthlyData[month][1] / count;
            System.out.println((month + 1) + "\t" + min + "\t" + max + "\t" + avg);
        }

        try {
            XSSFWorkbook xssfWorkbook = new XSSFWorkbook();
            XSSFSheet xssfSheet = xssfWorkbook.createSheet("DongSuh");

            // 탭 구분자 스타일 설정
            XSSFCellStyle tabCellStyle = xssfWorkbook.createCellStyle();
            tabCellStyle.setAlignment(HorizontalAlignment.LEFT);
            xssfSheet.setDefaultColumnStyle(0, tabCellStyle);
            xssfSheet.setDefaultColumnStyle(1, tabCellStyle);
            xssfSheet.setDefaultColumnStyle(2, tabCellStyle);
            xssfSheet.setDefaultColumnStyle(3, tabCellStyle);

            // 헤더 행 생성
            XSSFRow headerRow = xssfSheet.createRow(0);
            for (int i = 0; i < header.length; i++) {
                XSSFCell headerCell = headerRow.createCell(i);
                headerCell.setCellValue(header[i]);
            }

            // 데이터 행 생성
            for (int month = 0; month < 12; month++) {
                int count = (int) monthlyData[month][0];
                double min = monthlyData[month][2];
                double max = monthlyData[month][3];
                double avg = monthlyData[month][1] / count;

                XSSFRow dataRow = xssfSheet.createRow(month + 1);

                XSSFCell monthCell = dataRow.createCell(0);
                monthCell.setCellValue(month + 1);

                XSSFCell minCell = dataRow.createCell(1);
                minCell.setCellValue(min);

                XSSFCell maxCell = dataRow.createCell(2);
                maxCell.setCellValue(max);

                XSSFCell avgCell = dataRow.createCell(3);
                avgCell.setCellValue(avg);
            }

            FileOutputStream fos = new FileOutputStream(writeFileName);
            xssfWorkbook.write(fos);
            fos.close();
            xssfWorkbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
